START
MOV SP, 1535
MOV BP, 1535
CALL MAIN
HALT
MOV R0, R0//	Function partition Begins here
partition:
PUSH BP
MOV BP,SP
MOV R0, R0//	 Pushing for Local variables
MOV R0, 0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
MOV R0, R0//	Accessing local variable p binding 6 for =
MOV R0, 6
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable strt binding -3
MOV R1, -3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
SUB R1, R2
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable pVal binding 4 for =
MOV R0, 4
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing global variable a binding 0
MOV R1, 0
MOV R0, R0//	Accessing local variable stop binding -4
MOV R2, -4
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable i binding 3 for =
MOV R0, 3
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable strt binding -3
MOV R1, -3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
LABEL1:
MOV R0, R0//	Accessing local variable i binding 3
MOV R1, 3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R0, R0//	Accessing local variable stop binding -4
MOV R2, -4
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
LT R1, R2
JZ R1, LABEL2
MOV R0, R0//	Accessing local variable m binding 2 for =
MOV R0, 2
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing global variable a binding 0
MOV R1, 0
MOV R0, R0//	Accessing local variable i binding 3
MOV R2, 3
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable m binding 2
MOV R1, 2
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R0, R0//	Accessing local variable pVal binding 4
MOV R2, 4
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
LT R1, R2
JZ R1, LABEL3
MOV R0, R0//	Accessing local variable p binding 6 for =
MOV R0, 6
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable p binding 6
MOV R1, 6
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable t binding 7 for =
MOV R0, 7
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing global variable a binding 0
MOV R1, 0
MOV R0, R0//	Accessing local variable i binding 3
MOV R2, 3
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing Global variable a binding 0 for =
MOV R0, 0
MOV R0, R0//	Accessing local variable i binding 3
MOV R1, 3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
MOV R0, R0//	Accessing global variable a binding 0
MOV R1, 0
MOV R0, R0//	Accessing local variable p binding 6
MOV R2, 6
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing Global variable a binding 0 for =
MOV R0, 0
MOV R0, R0//	Accessing local variable p binding 6
MOV R1, 6
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
MOV R0, R0//	Accessing local variable t binding 7
MOV R1, 7
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
JMP LABEL4
LABEL3:
LABEL4:
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable i binding 3 for =
MOV R0, 3
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable i binding 3
MOV R1, 3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP LABEL1
LABEL2:
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing Global variable a binding 0 for =
MOV R0, 0
MOV R0, R0//	Accessing local variable stop binding -4
MOV R1, -4
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
MOV R0, R0//	Accessing global variable a binding 0
MOV R1, 0
MOV R0, R0//	Accessing local variable p binding 6
MOV R2, 6
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
MOV R3, 1
ADD R2, R3
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing Global variable a binding 0 for =
MOV R0, 0
MOV R0, R0//	Accessing local variable p binding 6
MOV R1, 6
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
ADD R0, R1
MOV R0, R0//	Accessing local variable pVal binding 4
MOV R1, 4
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable p binding 6 for =
MOV R0, 6
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable p binding 6
MOV R1, 6
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Return Statement Begins Here
MOV R0, R0//	Accessing local variable p binding 6
MOV R0, 6
MOV R1, BP
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, -2
ADD R1, R2
MOV [R1], R0
MOV SP, BP
POP BP
RET
MOV R0, R0//	Function partition ends here
MOV R0, R0//	Function quickSort Begins here
quickSort:
PUSH BP
MOV BP,SP
MOV R0, R0//	 Pushing for Local variables
MOV R0, 0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
MOV R0, R0//	Accessing local variable strt binding -3
MOV R1, -3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R0, R0//	Accessing local variable stop binding -4
MOV R2, -4
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
LT R1, R2
JZ R1, LABEL6
MOV R0, R0//	Accessing local variable p binding 1 for =
MOV R0, 1
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Pushing All Used Registers
PUSH R0
MOV R0, R0//	Calling Function partition
MOV R0, R0//	Accessing local variable stop binding -4
MOV R1, -4
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R0, R0//	Accessing local variable strt binding -3
MOV R1, -3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R0, R0//	For return Address
PUSH R0
CALL partition
MOV R0, R0//	To Get The Return Value
POP R1
MOV R0, R0//	Removing Arguments
POP R0
POP R0
MOV R0, R0//	Restoring Registers
POP R0
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable t binding 3 for =
MOV R0, 3
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Pushing All Used Registers
PUSH R0
MOV R0, R0//	Calling Function quickSort
MOV R0, R0//	Accessing local variable p binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
SUB R1, R2
PUSH R1
MOV R0, R0//	Accessing local variable strt binding -3
MOV R1, -3
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R0, R0//	For return Address
PUSH R0
CALL quickSort
MOV R0, R0//	To Get The Return Value
POP R1
MOV R0, R0//	Removing Arguments
POP R0
POP R0
MOV R0, R0//	Restoring Registers
POP R0
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable t binding 3 for =
MOV R0, 3
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Pushing All Used Registers
PUSH R0
MOV R0, R0//	Calling Function quickSort
MOV R0, R0//	Accessing local variable stop binding -4
MOV R1, -4
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
PUSH R1
MOV R0, R0//	Accessing local variable p binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
PUSH R1
MOV R0, R0//	For return Address
PUSH R0
CALL quickSort
MOV R0, R0//	To Get The Return Value
POP R1
MOV R0, R0//	Removing Arguments
POP R0
POP R0
MOV R0, R0//	Restoring Registers
POP R0
MOV [R0], R1
JMP LABEL7
LABEL6:
LABEL7:
MOV R0, R0//	End of Statement
MOV R0, R0//	Return Statement Begins Here
MOV R0, 1
MOV R1, BP
MOV R2, -2
ADD R1, R2
MOV [R1], R0
MOV SP, BP
POP BP
RET
MOV R0, R0//	Function quickSort ends here
MOV R0, R0//	Function MAIN Begins here
MAIN:
PUSH BP
MOV BP,SP
MOV R0, R0//	 Pushing for Local variables
MOV R0, 0
PUSH R0
PUSH R0
MOV R0, R0//	Accessing local variable i binding 1 for =
MOV R0, 1
MOV R1, BP
ADD R0, R1
MOV R1, 0
MOV [R0], R1
MOV R0, R0//	End of Statement
LABEL9:
MOV R0, R0//	Accessing local variable i binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 50
LT R1, R2
JZ R1, LABEL10
MOV R0, R0//	Accessing Global variable a binding 0 for =
MOV R0, 0
MOV R0, R0//	Accessing local variable i binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
ADD R0, R1
MOV R1, 50
MOV R0, R0//	Accessing local variable i binding 1
MOV R2, 1
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
SUB R1, R2
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable i binding 1 for =
MOV R0, 1
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable i binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP LABEL9
LABEL10:
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable p binding 2 for =
MOV R0, 2
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Pushing All Used Registers
PUSH R0
MOV R0, R0//	Calling Function quickSort
MOV R1, 49
PUSH R1
MOV R1, 0
PUSH R1
MOV R0, R0//	For return Address
PUSH R0
CALL quickSort
MOV R0, R0//	To Get The Return Value
POP R1
MOV R0, R0//	Removing Arguments
POP R0
POP R0
MOV R0, R0//	Restoring Registers
POP R0
MOV [R0], R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable i binding 1 for =
MOV R0, 1
MOV R1, BP
ADD R0, R1
MOV R1, 0
MOV [R0], R1
MOV R0, R0//	End of Statement
LABEL11:
MOV R0, R0//	Accessing local variable i binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 50
LT R1, R2
JZ R1, LABEL12
MOV R0, R0//	Accessing global variable a binding 0
MOV R1, 0
MOV R0, R0//	Accessing local variable i binding 1
MOV R2, 1
MOV R3, BP
ADD R2, R3
MOV R2, [R2]
ADD R1, R2
MOV R1, [R1]
OUT R1
MOV R0, R0//	End of Statement
MOV R0, R0//	Accessing local variable i binding 1 for =
MOV R0, 1
MOV R1, BP
ADD R0, R1
MOV R0, R0//	Accessing local variable i binding 1
MOV R1, 1
MOV R2, BP
ADD R1, R2
MOV R1, [R1]
MOV R2, 1
ADD R1, R2
MOV [R0], R1
JMP LABEL11
LABEL12:
MOV R0, R0//	End of Statement
MOV R0, R0//	Return Statement Begins Here
MOV R0, 0
MOV R1, BP
MOV R2, -2
ADD R1, R2
MOV [R1], R0
MOV SP, BP
POP BP
RET
MOV R0, R0//	Function MAIN ends here
HALT
